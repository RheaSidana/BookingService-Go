// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	model "BookingService/src/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddToDB provides a mock function with given fields: _a0
func (_m *Repository) AddToDB(_a0 model.Booking) (model.Booking, error) {
	ret := _m.Called(_a0)

	var r0 model.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Booking) (model.Booking, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.Booking) model.Booking); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Booking)
	}

	if rf, ok := ret.Get(1).(func(model.Booking) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountRows provides a mock function with given fields:
func (_m *Repository) CountRows() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Create provides a mock function with given fields: _a0
func (_m *Repository) Create(_a0 model.CreateBooking) (model.Booking, error) {
	ret := _m.Called(_a0)

	var r0 model.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(model.CreateBooking) (model.Booking, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.CreateBooking) model.Booking); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Booking)
	}

	if rf, ok := ret.Get(1).(func(model.CreateBooking) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: emailOrPhone
func (_m *Repository) FindAll(emailOrPhone string) (model.Bookings, error) {
	ret := _m.Called(emailOrPhone)

	var r0 model.Bookings
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Bookings, error)); ok {
		return rf(emailOrPhone)
	}
	if rf, ok := ret.Get(0).(func(string) model.Bookings); ok {
		r0 = rf(emailOrPhone)
	} else {
		r0 = ret.Get(0).(model.Bookings)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(emailOrPhone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllBookings provides a mock function with given fields: user
func (_m *Repository) FindAllBookings(user model.User) ([]model.Booking, error) {
	ret := _m.Called(user)

	var r0 []model.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(model.User) ([]model.Booking, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(model.User) []model.Booking); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllBookingsSeats provides a mock function with given fields: bookings
func (_m *Repository) FindAllBookingsSeats(bookings []model.Booking) (model.Bookings, error) {
	ret := _m.Called(bookings)

	var r0 model.Bookings
	var r1 error
	if rf, ok := ret.Get(0).(func([]model.Booking) (model.Bookings, error)); ok {
		return rf(bookings)
	}
	if rf, ok := ret.Get(0).(func([]model.Booking) model.Bookings); ok {
		r0 = rf(bookings)
	} else {
		r0 = ret.Get(0).(model.Bookings)
	}

	if rf, ok := ret.Get(1).(func([]model.Booking) error); ok {
		r1 = rf(bookings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
