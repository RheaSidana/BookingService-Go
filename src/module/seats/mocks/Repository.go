// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	model "BookingService/src/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Count provides a mock function with given fields: sclass
func (_m *Repository) Count(sclass string) (int, error) {
	ret := _m.Called(sclass)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(sclass)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(sclass)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sclass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]model.Seat, error) {
	ret := _m.Called()

	var r0 []model.Seat
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Seat, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Seat); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Seat)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSeat provides a mock function with given fields: id
func (_m *Repository) FindSeat(id string) (model.Seat, error) {
	ret := _m.Called(id)

	var r0 model.Seat
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Seat, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.Seat); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Seat)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSeatClass provides a mock function with given fields: id
func (_m *Repository) FindSeatClass(id string) (string, error) {
	ret := _m.Called(id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
